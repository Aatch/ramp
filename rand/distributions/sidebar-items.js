initSidebarItems({"mod":[["range","DEPRECATED: Use `distributions::uniform` instead."],["uniform","A distribution uniformly sampling numbers within a given range."]],"struct":[["Alphanumeric","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9."],["Bernoulli","The Bernoulli distribution."],["Binomial","The binomial distribution `Binomial(n, p)`."],["Cauchy","The Cauchy distribution `Cauchy(median, scale)`."],["ChiSquared","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom."],["DistIter","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness."],["Exp","The exponential distribution `Exp(lambda)`."],["Exp1","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster."],["FisherF","The Fisher F distribution `F(m, n)`."],["Gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],["LogNormal","The log-normal distribution `ln N(mean, std_dev**2)`."],["Normal","The normal distribution `N(mean, std_dev**2)`."],["Open01","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint."],["OpenClosed01","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0."],["Pareto","Samples floating-point numbers according to the Pareto distribution"],["Poisson","The Poisson distribution `Poisson(lambda)`."],["Standard","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type."],["StandardNormal","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster."],["StudentT","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom."],["Uniform","Sample values uniformly between two bounds."],["Weighted","A value with a particular weight for use with `WeightedChoice`."],["WeightedChoice","A distribution that selects from a finite collection of weighted items."]],"trait":[["Distribution","Types (distributions) that can be used to create a random instance of `T`."],["IndependentSample","`Sample`s that do not require keeping track of state."],["Sample","Types that can be used to create a random instance of `Support`."]]});